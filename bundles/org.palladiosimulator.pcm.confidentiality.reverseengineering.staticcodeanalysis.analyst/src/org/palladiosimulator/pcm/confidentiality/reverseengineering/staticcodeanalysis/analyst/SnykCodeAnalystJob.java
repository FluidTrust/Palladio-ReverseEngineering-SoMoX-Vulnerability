package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.analyst;

import java.nio.file.Path;

import org.eclipse.core.runtime.IProgressMonitor;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.SnykCLIStaticCodeAnalyst;
import org.palladiosimulator.somox.analyzer.rules.blackboard.RuleEngineBlackboard;
import org.palladiosimulator.somox.analyzer.rules.configuration.RuleEngineConfiguration;

import de.uka.ipd.sdq.workflow.jobs.AbstractBlackboardInteractingJob;
import de.uka.ipd.sdq.workflow.jobs.CleanupFailedException;

public class SnykCodeAnalystJob extends AbstractBlackboardInteractingJob<RuleEngineBlackboard> {
    private final RuleEngineConfiguration configuration;

    public SnykCodeAnalystJob(RuleEngineConfiguration configuration, RuleEngineBlackboard blackboard) {
        this.configuration = configuration;
        setBlackboard(blackboard);
    }

    @Override
    public void execute(IProgressMonitor monitor) {
        String snykExeLocation = configuration.getAnalystConfig()
            .getConfig(SnykCodeAnalyst.ANALYST_ID, SnykCodeAnalyst.SNYK_EXE_LOCATION_KEY);
        if (snykExeLocation != null) {
            Path snykExePath = Path.of(snykExeLocation);
            Path outputPath = Path.of(configuration.getOutputFolder()
                .toFileString());
            String apiKey = configuration.getAnalystConfig()
                .getConfig(SnykCodeAnalyst.ANALYST_ID, SnykCodeAnalyst.DATABASE_API_KEY);
            String snykToken = configuration.getAnalystConfig()
                .getConfig(SnykCodeAnalyst.ANALYST_ID, SnykCodeAnalyst.SNYK_TOKEN_KEY);
            SnykCLIStaticCodeAnalyst analyst = new SnykCLIStaticCodeAnalyst(snykExePath, outputPath, apiKey, snykToken);
            analyst.analyze(getBlackboard().getEntityPaths());
        }
    }

    @Override
    public void cleanup(IProgressMonitor arg0) throws CleanupFailedException {
    }

    @Override
    public String getName() {
        return "Snyk Code Analyst Job";
    }
}
