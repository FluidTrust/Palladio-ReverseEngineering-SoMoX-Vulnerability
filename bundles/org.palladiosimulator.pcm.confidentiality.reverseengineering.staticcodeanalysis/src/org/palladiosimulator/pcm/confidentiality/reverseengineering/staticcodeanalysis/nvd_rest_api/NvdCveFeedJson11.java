
package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

/**
 * JSON Schema for NVD Vulnerability Data Feed version 1.1
 * <p>
 * 
 * 
 */
@Generated("jsonschema2pojo")
public class NvdCveFeedJson11 {

    /**
     * 
     * (Required)
     * 
     */
    @SerializedName("CVE_data_type")
    @Expose
    private String cveDataType;
    /**
     * 
     * (Required)
     * 
     */
    @SerializedName("CVE_data_format")
    @Expose
    private String cveDataFormat;
    /**
     * 
     * (Required)
     * 
     */
    @SerializedName("CVE_data_version")
    @Expose
    private String cveDataVersion;
    /**
     * NVD adds number of CVE in this feed
     * 
     */
    @SerializedName("CVE_data_numberOfCVEs")
    @Expose
    private String cveDataNumberOfCVEs;
    /**
     * NVD adds feed date timestamp
     * 
     */
    @SerializedName("CVE_data_timestamp")
    @Expose
    private String cveDataTimestamp;
    /**
     * NVD feed array of CVE (Required)
     * 
     */
    @SerializedName("CVE_Items")
    @Expose
    private List<DefCveItem> cveItems = new ArrayList<DefCveItem>();

    public String getCVEDataType() {
        return cveDataType;
    }

    public void setCVEDataType(String cveDataType) {
        this.cveDataType = cveDataType;
    }

    public String getCVEDataFormat() {
        return cveDataFormat;
    }

    public void setCVEDataFormat(String cveDataFormat) {
        this.cveDataFormat = cveDataFormat;
    }

    public String getCVEDataVersion() {
        return cveDataVersion;
    }

    public void setCVEDataVersion(String cveDataVersion) {
        this.cveDataVersion = cveDataVersion;
    }

    /**
     * NVD adds number of CVE in this feed
     * 
     */
    public String getCVEDataNumberOfCVEs() {
        return cveDataNumberOfCVEs;
    }

    /**
     * NVD adds number of CVE in this feed
     * 
     */
    public void setCVEDataNumberOfCVEs(String cveDataNumberOfCVEs) {
        this.cveDataNumberOfCVEs = cveDataNumberOfCVEs;
    }

    /**
     * NVD adds feed date timestamp
     * 
     */
    public String getCVEDataTimestamp() {
        return cveDataTimestamp;
    }

    /**
     * NVD adds feed date timestamp
     * 
     */
    public void setCVEDataTimestamp(String cveDataTimestamp) {
        this.cveDataTimestamp = cveDataTimestamp;
    }

    /**
     * NVD feed array of CVE
     * 
     */
    public List<DefCveItem> getCVEItems() {
        return cveItems;
    }

    /**
     * NVD feed array of CVE
     * 
     */
    public void setCVEItems(List<DefCveItem> cveItems) {
        this.cveItems = cveItems;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(NvdCveFeedJson11.class.getName())
            .append('@')
            .append(Integer.toHexString(System.identityHashCode(this)))
            .append('[');
        sb.append("cveDataType");
        sb.append('=');
        sb.append(((this.cveDataType == null) ? "<null>" : this.cveDataType));
        sb.append(',');
        sb.append("cveDataFormat");
        sb.append('=');
        sb.append(((this.cveDataFormat == null) ? "<null>" : this.cveDataFormat));
        sb.append(',');
        sb.append("cveDataVersion");
        sb.append('=');
        sb.append(((this.cveDataVersion == null) ? "<null>" : this.cveDataVersion));
        sb.append(',');
        sb.append("cveDataNumberOfCVEs");
        sb.append('=');
        sb.append(((this.cveDataNumberOfCVEs == null) ? "<null>" : this.cveDataNumberOfCVEs));
        sb.append(',');
        sb.append("cveDataTimestamp");
        sb.append('=');
        sb.append(((this.cveDataTimestamp == null) ? "<null>" : this.cveDataTimestamp));
        sb.append(',');
        sb.append("cveItems");
        sb.append('=');
        sb.append(((this.cveItems == null) ? "<null>" : this.cveItems));
        sb.append(',');
        if (sb.charAt((sb.length() - 1)) == ',') {
            sb.setCharAt((sb.length() - 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result * 31) + ((this.cveDataNumberOfCVEs == null) ? 0 : this.cveDataNumberOfCVEs.hashCode()));
        result = ((result * 31) + ((this.cveDataFormat == null) ? 0 : this.cveDataFormat.hashCode()));
        result = ((result * 31) + ((this.cveDataTimestamp == null) ? 0 : this.cveDataTimestamp.hashCode()));
        result = ((result * 31) + ((this.cveDataType == null) ? 0 : this.cveDataType.hashCode()));
        result = ((result * 31) + ((this.cveItems == null) ? 0 : this.cveItems.hashCode()));
        result = ((result * 31) + ((this.cveDataVersion == null) ? 0 : this.cveDataVersion.hashCode()));
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof NvdCveFeedJson11) == false) {
            return false;
        }
        NvdCveFeedJson11 rhs = ((NvdCveFeedJson11) other);
        return (((((((this.cveDataNumberOfCVEs == rhs.cveDataNumberOfCVEs)
                || ((this.cveDataNumberOfCVEs != null) && this.cveDataNumberOfCVEs.equals(rhs.cveDataNumberOfCVEs)))
                && ((this.cveDataFormat == rhs.cveDataFormat)
                        || ((this.cveDataFormat != null) && this.cveDataFormat.equals(rhs.cveDataFormat))))
                && ((this.cveDataTimestamp == rhs.cveDataTimestamp)
                        || ((this.cveDataTimestamp != null) && this.cveDataTimestamp.equals(rhs.cveDataTimestamp))))
                && ((this.cveDataType == rhs.cveDataType)
                        || ((this.cveDataType != null) && this.cveDataType.equals(rhs.cveDataType))))
                && ((this.cveItems == rhs.cveItems) || ((this.cveItems != null) && this.cveItems.equals(rhs.cveItems))))
                && ((this.cveDataVersion == rhs.cveDataVersion)
                        || ((this.cveDataVersion != null) && this.cveDataVersion.equals(rhs.cveDataVersion))));
    }

}
