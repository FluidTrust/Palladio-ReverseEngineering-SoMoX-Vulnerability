package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.test;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.NistVulnerabilityDatabase;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.VulnerabilityDatabaseException;

public class SnykWebsiteParsingTest {
    /**
     * Tests if the Snyk online database still has the required structure.
     */
    @Test
    public void snykDatabaseTest() {
        Document doc = null;
        try {
            doc = Jsoup.connect("https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-1579721")
                .get();
        } catch (IOException e) {
            fail("Could not connect to the Snyk online database");
        }
        List<String> cveLinks = doc.select("a[href]")
            .stream()
            .map(x -> x.text())
            .filter(x -> x.startsWith("CVE-"))
            .collect(Collectors.toList());
        assertFalse(cveLinks.isEmpty());
    }

    /**
     * Test if the NVD database access works.
     */
    @Test
    public void databaseTest() {
        NistVulnerabilityDatabase database = new NistVulnerabilityDatabase();

        // Assert that this does not throw
        database.getCVEVulnerability("CVE-2019-10219", List.of(79));

        assertThrows(VulnerabilityDatabaseException.class,
                () -> database.getCVEVulnerability("THIS_IS_NOT_A_VALID_CVE", List.of(1337)));
    }
}
